/* -------------------------TAG UI COMPONENT-------------------------- */
function activateUITag(requiredtags) {
  document.querySelectorAll(".ui-tags").forEach((component) => {
    component.appendChild(document.createElement("div")); //Create a container for the tags

    let taglistArray = [];
    let tagRequiredArray = [];
    tagRequiredArray = requiredtags;
    //add the required tag names to the tag required array
    //tagRequiredArray = (component.getAttribute("required-tagslist")).split(":::");

    let taginput = document.createElement("div");
    taginput.classList.add("input-group");
    taginput.innerHTML = `<input type="text" class="form-control" aria-label="Tag" id="ui-tag-input"><span class="input-group-text" style="cursor: pointer;" id="ui-tag-btnAdd">Add</span>`;

    createDatalist(
      taginput.querySelector("input"),
      tagRequiredArray,
      "requiredtags"
    );

    component.appendChild(taginput);

    // Add the tags to the tag container
    function update_tag_ui() {
      let tagcontainer = component.querySelector("div");
      tagcontainer.innerHTML = "";
      taglistArray.forEach((tagitem) => {
        let single_tag = document.createElement("span");
        single_tag.classList.add("ui-tag-item");
        single_tag.innerText = tagitem;
        let icon = document.createElement("i");
        icon.classList.add("bi");
        icon.classList.add("bi-x-lg");
        icon.classList.add("fa-fw");
        icon.classList.add("ui-tag-btnRemove");
        single_tag.appendChild(icon);
        tagcontainer.appendChild(single_tag);
      });

      component.querySelectorAll("div > span > i").forEach((el) => {
        el.addEventListener("click", (event) => {
          taglistArray.pop(event.target.parentElement.textContent);
          event.target.parentElement.remove();
        });
      });
    }

    //IF THE ADD TAG BTN IS CLICKED
    component
      .querySelector("#ui-tag-btnAdd")
      .addEventListener("click", (event) => {
        let tagname = component.querySelector("#ui-tag-input").value;
        if (tagRequiredArray.includes(tagname) == true) {
          taglistArray.push(tagname);
          tagRequiredArray.pop(tagname);
          update_tag_ui();
        }
      });
  });
}

function createToolTip(element, placement, title) {
  element.setAttribute("data-bs-toggle", "tooltip");
  element.setAttribute("data-bs-placement", placement);
  element.setAttribute("data-bs-original-title", title);
}

function createDatalist(theelement, thelist, listname) {
  let mydatalist = document.createElement("datalist");
  mydatalist.setAttribute("id", listname);
  theelement.setAttribute("list", listname);
  thelist.forEach((listitem) => {
    let opt = document.createElement("option");
    opt.value = listitem;
    mydatalist.append(opt);
  });
  document.body.append(mydatalist);
}

function createForm(body, properties) {
  try {
    let myform = document.createElement("form");

    properties.forEach(property => {
      let myinput = document.createElement("input");
      if ((typeof body[property]) == Number) {
        myinput.setAttribute("type", "number");
        myinput.setAttribute("value", body[property]);
      } else if ((typeof body[property]) == String) {
        myinput.setAttribute("type", "text");
        myinput.setAttribute("value", body[property]);
      } else if ((typeof body[property]) == Boolean) {
        myinput.setAttribute("type", "checkbox");
        myinput.setAttribute("checked", body[property]);
        myinput.setAttribute("value", body[property]);
      } else {
        myinput.setAttribute("type", "text");
        myinput.setAttribute("value", String(body[property]));
      };
      myform.appendChild(myinput);
    });

    return myform

  } catch (error) {

  }
}

function postdata(theurl, theform) {
  let returnstring;
  async function asyncfetch() {
    const res = await fetch(theurl, {
      method: 'POST',
      body: new FormData(theform)
    });
    const data = await res.json();
    returnstring = data;
  }
  asyncfetch();
  return returnstring;
}

